{"version":3,"sources":["redux/reducers.js","redux/store.js","redux/actions.js","redux/selectors.js","Components/ContactForm/ContactForm.js","Components/Filter/Filter.js","Components/ContactList/ContactList.js","Components/ContactItem/ContactItem.js","App.js","index.js"],"names":["contactsList","createReducer","state","payload","filter","contact","id","contactFilter","_","persistConfig","key","version","storage","blacklist","contactReducer","combineReducers","contacts","persistedContactReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","addContact","createAction","deleteContact","filterValue","getContacts","getFilter","getFilteredContacts","normalizedFilter","toLowerCase","e","name","includes","ContactForm","useState","setName","number","setNumber","dispatch","useDispatch","useSelector","nameId","shortid","numberId","resetForm","className","onSubmit","preventDefault","contactObj","map","alert","htmlFor","type","value","onChange","target","pattern","title","required","Filter","ContactList","children","ContactItem","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2641faf3.chunk.js","sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\r\n\r\nexport const contactsList = createReducer([], {\r\n  'contact/add': (state, { payload }) => [...state, payload],\r\n  'contact/delete': (state, { payload }) =>\r\n    state.filter((contact) => contact.id !== payload),\r\n})\r\n\r\nexport const contactFilter = createReducer('', {\r\n  'filter/value': (_, { payload }) => payload,\r\n})\r\n","import { configureStore } from '@reduxjs/toolkit'\r\nimport { combineReducers } from 'redux'\r\nimport { contactsList, contactFilter } from './reducers'\r\n\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\n\r\nconst persistConfig = {\r\n  key: 'contacts',\r\n  version: 1,\r\n  storage,\r\n  blacklist: ['filter'],\r\n}\r\n\r\nconst contactReducer = combineReducers({\r\n  contacts: contactsList,\r\n  filter: contactFilter,\r\n})\r\n\r\nconst persistedContactReducer = persistReducer(persistConfig, contactReducer)\r\n\r\nexport const store = configureStore({\r\n  reducer: persistedContactReducer,\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }),\r\n})\r\n\r\nexport const persistor = persistStore(store)\r\n","import { createAction } from '@reduxjs/toolkit'\r\n\r\nexport const addContact = createAction('contact/add')\r\nexport const deleteContact = createAction('contact/delete')\r\nexport const filterValue = createAction('filter/value')\r\n","export const getContacts = (state) => state.contacts\r\n\r\nexport const getFilter = (state) => state.filter\r\n\r\nexport const getFilteredContacts = (state) => {\r\n  const contacts = getContacts(state)\r\n  const filter = getFilter(state)\r\n  const normalizedFilter = filter.toLowerCase()\r\n  return contacts.filter((e) => e.name.toLowerCase().includes(normalizedFilter))\r\n}\r\n","import { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport shortid from 'shortid'\nimport { addContact } from '../../redux/actions'\nimport { getContacts } from '../../redux/selectors'\nimport './ContactForm.css'\n\nfunction ContactForm() {\n  const [name, setName] = useState('')\n  const [number, setNumber] = useState('')\n\n  const dispatch = useDispatch()\n  const contacts = useSelector(getContacts)\n\n  let nameId = shortid()\n  let numberId = shortid()\n\n  const handleChangeName = (e) => {\n    setName(e.target.value)\n  }\n\n  const handleChangeNumber = (e) => {\n    setNumber(e.target.value)\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n\n    const contactObj = {\n      id: shortid(),\n      name,\n      number,\n    }\n\n    if (contacts.map((contact) => contact.name).includes(contactObj.name)) {\n      alert(`${contactObj.name} is already in contacts`)\n    } else {\n      dispatch(addContact(contactObj))\n    }\n    resetForm()\n  }\n\n  const resetForm = () => {\n    setName('')\n    setNumber('')\n  }\n\n  return (\n    <form className='contact-form' onSubmit={handleSubmit}>\n      <label className='label' htmlFor={nameId}>\n        Enter name\n      </label>\n      <input\n        id={nameId}\n        type='text'\n        className='input'\n        name='name'\n        value={name}\n        onChange={handleChangeName}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n      />\n      <label className='label' htmlFor={numberId}>\n        Enter number\n      </label>\n      <input\n        id={numberId}\n        type='tel'\n        className='input'\n        name='number'\n        value={number}\n        onChange={handleChangeNumber}\n        pattern='\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}'\n        title='Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +'\n        required\n      />\n      <button type='submit' className='contact-button'>\n        Add contact\n      </button>\n    </form>\n  )\n}\n\nContactForm.propTypes = {\n  banOnAddingDuplicateContact: PropTypes.func,\n}\n\nexport default ContactForm\n","import { useSelector, useDispatch } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { getFilter } from '../../redux/selectors'\nimport { filterValue } from '../../redux/actions'\nimport './Filter.css'\n\nconst Filter = () => {\n  const value = useSelector(getFilter)\n  const dispatch = useDispatch()\n\n  return (\n    <div className='filter-container'>\n      <label className='label' htmlFor='filter'>\n        Find contacts by name\n      </label>\n      <input\n        className='input'\n        id='filter'\n        type='text'\n        name='filter'\n        value={value}\n        onChange={(e) => dispatch(filterValue(e.target.value))}\n      />\n    </div>\n  )\n}\n\nFilter.propTypes = {\n  handleChangeFilter: PropTypes.func,\n}\n\nexport default Filter\n","import './ContactList.css'\n\nconst ContactList = ({ children }) => {\n  return <ul className='contact-list'>{children}</ul>\n}\n\nexport default ContactList\n","import { useSelector, useDispatch } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport { deleteContact } from '../../redux/actions'\nimport { getFilteredContacts } from '../../redux/selectors'\nimport './ContactItem.css'\n\nconst ContactItem = () => {\n  const contactsList = useSelector(getFilteredContacts)\n  const dispatch = useDispatch()\n  return (\n    <>\n      {contactsList.map(({ id, name, number }) => (\n        <li key={id}>\n          {name}: {number}\n          <button\n            type='button'\n            className='delete-button'\n            onClick={() => dispatch(deleteContact(id))}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </>\n  )\n}\n\nContactItem.propTypes = {\n  filteredContacts: PropTypes.array,\n  deleteContact: PropTypes.func,\n}\n\nexport default ContactItem\n","import ContactForm from './Components/ContactForm/ContactForm'\nimport Filter from './Components/Filter/Filter'\nimport ContactList from './Components/ContactList/ContactList'\nimport ContactItem from './Components/ContactItem/ContactItem'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className='App'>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList>\n        <ContactItem />\n      </ContactList>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { store, persistor } from './redux/store'\nimport { Provider } from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <PersistGate persistor={persistor}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </PersistGate>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}